nSim = 1000
n = 25
mew_arr = seq(0,2,0.05)
arr = array(0,dim=c(2,length(mew_arr)))
for (i in 1:length(mew_arr)){
arr1 = array(0,dim=nSim)
arr2 = array(0,dim=nSim)
for (j in 1:nSim){
var = rnorm(n, mean = mew_arr[i], sd = 1)
arr1[j] = sign.test(x = var)
arr2[j] = myt.test(x = var)
arr[1,i] =1 - sum(arr1) / length(arr1)
arr[2,i] =1 - sum(arr2) / length(arr2)
}
}
plot(mew_arr,1-arr[1,],main = 'Graph of the Power of the Sign Test vs T-Test for N(μ,1)',xlab = 'Values of μ', ylab = 'Power',ylim = c(0,1),col='red')
points(mew_arr,1-arr[2,],col='blue')
abline(h=0.95)
legend()
set.seed(0)
nSim = 1000
n = 25
mew_arr = seq(0,2,0.05)
arr = array(0,dim=c(2,length(mew_arr)))
for (i in 1:length(mew_arr)){
arr1 = array(0,dim=nSim)
arr2 = array(0,dim=nSim)
for (j in 1:nSim){
var = rnorm(n, mean = mew_arr[i], sd = 1)
arr1[j] = sign.test(x = var)
arr2[j] = myt.test(x = var)
arr[1,i] =1 - sum(arr1) / length(arr1)
arr[2,i] =1 - sum(arr2) / length(arr2)
}
}
plot(mew_arr,1-arr[1,],main = 'Graph of the Power of the Sign Test vs T-Test for N(μ,1)',xlab = 'Values of μ', ylab = 'Power',ylim = c(0,1),col='red')
points(mew_arr,1-arr[2,],col='blue')
abline(h=0.95)
legend(1.5,0.3,legend=c('Sign-Test','T-Test'))
set.seed(0)
nSim = 1000
n = 25
mew_arr = seq(0,2,0.05)
arr = array(0,dim=c(2,length(mew_arr)))
for (i in 1:length(mew_arr)){
arr1 = array(0,dim=nSim)
arr2 = array(0,dim=nSim)
for (j in 1:nSim){
var = rnorm(n, mean = mew_arr[i], sd = 1)
arr1[j] = sign.test(x = var)
arr2[j] = myt.test(x = var)
arr[1,i] =1 - sum(arr1) / length(arr1)
arr[2,i] =1 - sum(arr2) / length(arr2)
}
}
plot(mew_arr,1-arr[1,],main = 'Graph of the Power of the Sign Test vs T-Test for N(μ,1)',xlab = 'Values of μ', ylab = 'Power',ylim = c(0,1),col='red')
points(mew_arr,1-arr[2,],col='blue')
abline(h=0.95)
legend(1.5,0.3,legend=c('Sign-Test','T-Test'),col=c('red','blue'))
set.seed(0)
nSim = 1000
n = 25
mew_arr = seq(0,2,0.05)
arr = array(0,dim=c(2,length(mew_arr)))
for (i in 1:length(mew_arr)){
arr1 = array(0,dim=nSim)
arr2 = array(0,dim=nSim)
for (j in 1:nSim){
var = rnorm(n, mean = mew_arr[i], sd = 1)
arr1[j] = sign.test(x = var)
arr2[j] = myt.test(x = var)
arr[1,i] =1 - sum(arr1) / length(arr1)
arr[2,i] =1 - sum(arr2) / length(arr2)
}
}
plot(mew_arr,1-arr[1,],main = 'Graph of the Power of the Sign Test vs T-Test for N(μ,1)',xlab = 'Values of μ', ylab = 'Power',ylim = c(0,1),col='red')
points(mew_arr,1-arr[2,],col='blue')
abline(h=0.95)
legend(1.5,0.3,legend=c('Sign-Test','T-Test'),col=c('red','blue'),lty=1)
set.seed(0)
nSim = 1000
n = 25
mew_arr = seq(0,2,0.05)
arr = array(0,dim=c(2,length(mew_arr)))
for (i in 1:length(mew_arr)){
arr1 = array(0,dim=nSim)
arr2 = array(0,dim=nSim)
for (j in 1:nSim){
var = rnorm(n, mean = mew_arr[i], sd = 1)
arr1[j] = sign.test(x = var)
arr2[j] = myt.test(x = var)
arr[1,i] =1 - sum(arr1) / length(arr1)
arr[2,i] =1 - sum(arr2) / length(arr2)
}
}
plot(mew_arr,1-arr[1,],main = 'Graph of the Power of the Sign Test vs T-Test for N(μ,1)',xlab = 'Values of μ', ylab = 'Power',ylim = c(0,1),col='red')
points(mew_arr,1-arr[2,],col='blue')
abline(h=0.95)
legend(1.5,0.3,legend=c('Sign-Test','T-Test'),col=c('red','blue'),bty='o')
set.seed(0)
nSim = 1000
n = 25
mew_arr = seq(0,2,0.05)
arr = array(0,dim=c(2,length(mew_arr)))
for (i in 1:length(mew_arr)){
arr1 = array(0,dim=nSim)
arr2 = array(0,dim=nSim)
for (j in 1:nSim){
var = rnorm(n, mean = mew_arr[i], sd = 1)
arr1[j] = sign.test(x = var)
arr2[j] = myt.test(x = var)
arr[1,i] =1 - sum(arr1) / length(arr1)
arr[2,i] =1 - sum(arr2) / length(arr2)
}
}
plot(mew_arr,1-arr[1,],main = 'Graph of the Power of the Sign Test vs T-Test for N(μ,1)',xlab = 'Values of μ', ylab = 'Power',ylim = c(0,1),col='red')
points(mew_arr,1-arr[2,],col='blue')
abline(h=0.95)
legend('topleft',legend=c('Sign-Test','T-Test'),col=c('red','blue'),bty='o')
set.seed(0)
nSim = 1000
n = 25
mew_arr = seq(0,2,0.05)
arr = array(0,dim=c(2,length(mew_arr)))
for (i in 1:length(mew_arr)){
arr1 = array(0,dim=nSim)
arr2 = array(0,dim=nSim)
for (j in 1:nSim){
var = rnorm(n, mean = mew_arr[i], sd = 1)
arr1[j] = sign.test(x = var)
arr2[j] = myt.test(x = var)
arr[1,i] =1 - sum(arr1) / length(arr1)
arr[2,i] =1 - sum(arr2) / length(arr2)
}
}
plot(mew_arr,1-arr[1,],main = 'Graph of the Power of the Sign Test vs T-Test for N(μ,1)',xlab = 'Values of μ', ylab = 'Power',ylim = c(0,1),col='red')
points(mew_arr,1-arr[2,],col='blue')
abline(h=0.95)
legend('bottomright',legend=c('Sign-Test','T-Test'),col=c('red','blue'),bty='o')
set.seed(0)
nSim = 1000
n = 25
mew_arr = seq(0,2,0.05)
arr = array(0,dim=c(2,length(mew_arr)))
for (i in 1:length(mew_arr)){
arr1 = array(0,dim=nSim)
arr2 = array(0,dim=nSim)
for (j in 1:nSim){
var = rnorm(n, mean = mew_arr[i], sd = 1)
arr1[j] = sign.test(x = var)
arr2[j] = myt.test(x = var)
arr[1,i] =1 - sum(arr1) / length(arr1)
arr[2,i] =1 - sum(arr2) / length(arr2)
}
}
plot(mew_arr,1-arr[1,],main = 'Graph of the Power of the Sign Test vs T-Test for N(μ,1)',xlab = 'Values of μ', ylab = 'Power',ylim = c(0,1),col='red')
points(mew_arr,1-arr[2,],col='blue')
abline(h=0.95)
legend('bottomright',legend=c('Sign-Test','T-Test'),col=c('red','blue'),pch=1)
sign.test(x = set_1,m=2,alpha=0.1,alternative = 'two.sided')
sign.test(x = set_1,m=2,alpha=0.1)
sign.test(x = set_1,m=2,alpha=0.05)
sign.test(x = set_1,m=.22,alpha=0.05)
sign.test(x = set_1,m=.222,alpha=0.05)
sign.test(x = set_1,m=2.2,alpha=0.05)
sign.test(x = set_1,m=2.3,alpha=0.05)
sign.test(x = set_1,m=2.3,alpha=0.05)
sign.test(x = set_1,m=5,alpha=0.05)
sign.test(x = set_1,m=10,alpha=0.05)
sign.test(x = set_1,m=1000,alpha=0.05)
sign.test(x = set_1,m=-1000,alpha=0.05)
sign.test(x = set_1,m=3,alpha=0.05,alternative = 'two.sided')
sign.test(x = set_1,m=2,alpha=0.05,alternative = 'two.sided')
sign.test(x = set_1,m=2,alpha=0.1,alternative = 'two.sided')
sign.test(x = set_1,m=2.5,alpha=0.1,alternative = 'two.sided')
sign.test(x = set_1,m=3,alpha=0.1,alternative = 'two.sided')
sign.test(x = set_1,m=2.8,alpha=0.1,alternative = 'two.sided')
sign.test(x = set_1,m=2.7,alpha=0.1,alternative = 'two.sided')
sign.test(x = set_1,m=2.75,alpha=0.1,alternative = 'two.sided')
sign.test(x = set_1,m=2.79,alpha=0.1,alternative = 'two.sided')
conf_int = function(x,alpha){
n = length(x)
T1_values = c()
T2_values = c()
for (i in 0:n){
if (pbinom(i,n,0.5, lower.tail = TRUE) <= alpha/2){
T1_values = c(T1_values,i)
}
if (pbinom(i,n + 1,0.5,lower.tail = FALSE) <= alpha/2){
T2_values = c(T2_values,i)
}
}
T_interval = intersect(setdiff(0:n,T1_values),setdiff(0:n,T2_values))
x_sorted = sort(x)
C1 = x_sorted[T_interval[1]]
C2 = x_sorted[tail(T_interval,1)]
return (c(C1,C2))
}
conf_int = function(x,alpha){
n = length(x)
T1_values = c()
T2_values = c()
for (i in 0:n){
if (pbinom(i,n,0.5, lower.tail = TRUE) <= alpha/2){
T1_values = c(T1_values,i)
}
if (pbinom(i,n 1,0.5,lower.tail = FALSE) <= alpha/2){
conf_int = function(x,alpha){
n = length(x)
T1_values = c()
T2_values = c()
for (i in 0:n){
if (pbinom(i,n,0.5, lower.tail = TRUE) <= alpha/2){
T1_values = c(T1_values,i)
}
if (pbinom(i,n,0.5,lower.tail = FALSE) <= alpha/2){
T2_values = c(T2_values,i)
}
}
T_interval = intersect(setdiff(0:n,T1_values),setdiff(0:n,T2_values))
x_sorted = sort(x)
C1 = x_sorted[T_interval[1]]
C2 = x_sorted[tail(T_interval,1)]
return (c(C1,C2))
}
conf_int = function(x,alpha){
n = length(x)
T1_values = c()
T2_values = c()
for (i in 0:n){
if (pbinom(i,n,0.5, lower.tail = TRUE) <= alpha/2){
T1_values = c(T1_values,i)
}
if (pbinom(i,n+1,0.5,lower.tail = FALSE) <= alpha/2){
T2_values = c(T2_values,i)
}
}
T_interval = intersect(setdiff(0:n,T1_values),setdiff(0:n,T2_values))
x_sorted = sort(x)
C1 = x_sorted[T_interval[1]]
C2 = x_sorted[tail(T_interval,1)]
return (c(C1,C2))
}
sign.test(x = 0:10,m = 0:10,alpha = 0.05)
conf_int = function(x,alpha){
n = length(x)
T1_values = c()
T2_values = c()
for (i in 0:n){
if (pbinom(i,n,0.5, lower.tail = TRUE) <= alpha/2){
T1_values = c(T1_values,i)
}
if (pbinom(i,n+1,0.5,lower.tail = FALSE) <= alpha/2){
T2_values = c(T2_values,i)
}
}
T_interval = intersect(setdiff(0:n,T1_values),setdiff(0:n,T2_values))
x_sorted = sort(x)
C1 = x_sorted[T_interval[1]]
C2 = x_sorted[tail(T_interval,1)]
return (c(C1,C2))
}
conf_int_2 = function(x,alpha){
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alterantive='two.sided')
}
return (output)
}
print(conf_int_2(set_1,0.1))
conf_int = function(x,alpha){
n = length(x)
T1_values = c()
T2_values = c()
for (i in 0:n){
if (pbinom(i,n,0.5, lower.tail = TRUE) <= alpha/2){
T1_values = c(T1_values,i)
}
if (pbinom(i,n+1,0.5,lower.tail = FALSE) <= alpha/2){
T2_values = c(T2_values,i)
}
}
T_interval = intersect(setdiff(0:n,T1_values),setdiff(0:n,T2_values))
x_sorted = sort(x)
C1 = x_sorted[T_interval[1]]
C2 = x_sorted[tail(T_interval,1)]
return (c(C1,C2))
}
conf_int_2 = function(x,alpha){
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
return (output)
}
print(conf_int_2(set_1,0.1))
print(conf_int_2(0:10,0.1))
conf_int = function(x,alpha){
n = length(x)
T1_values = c()
T2_values = c()
for (i in 0:n){
if (pbinom(i,n,0.5, lower.tail = TRUE) <= alpha/2){
T1_values = c(T1_values,i)
}
if (pbinom(i,n+1,0.5,lower.tail = FALSE) <= alpha/2){
T2_values = c(T2_values,i)
}
}
T_interval = intersect(setdiff(0:n,T1_values),setdiff(0:n,T2_values))
x_sorted = sort(x)
C1 = x_sorted[T_interval[1]]
C2 = x_sorted[tail(T_interval,1)]
return (c(C1,C2))
}
conf_int_2 = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
return (output)
}
print(conf_int_2(set_1,0.1))
conf_int = function(x,alpha){
n = length(x)
T1_values = c()
T2_values = c()
for (i in 0:n){
if (pbinom(i,n,0.5, lower.tail = TRUE) <= alpha/2){
T1_values = c(T1_values,i)
}
if (pbinom(i,n+1,0.5,lower.tail = FALSE) <= alpha/2){
T2_values = c(T2_values,i)
}
}
T_interval = intersect(setdiff(0:n,T1_values),setdiff(0:n,T2_values))
x_sorted = sort(x)
C1 = x_sorted[T_interval[1]]
C2 = x_sorted[tail(T_interval,1)]
return (c(C1,C2))
}
conf_int_2 = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
return (x[output==0])
}
print(conf_int_2(set_1,0.1))
sign.test(set_1,m=2.6,alpha = 0.1, alternative='two.sided')
sign.test(set_1,m=2.8,alpha = 0.1, alternative='two.sided')
sign.test(set_1,m=2.7999,alpha = 0.1, alternative='two.sided')
sign.test(set_1,m=-1,alpha = 0.1, alternative='two.sided')
sign.test(set_1,m=-0.11,alpha = 0.1, alternative='two.sided')
sign.test(set_1,m=-0.1,alpha = 0.1, alternative='two.sided')
sign.test(set_1,m=0.1,alpha = 0.1, alternative='two.sided')
sign.test(set_1,m=0.0999,alpha = 0.1, alternative='two.sided')
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = match(0,output)
last_zero_plus = zeros.tail(zeros,n=1) + 1
return (x[zeros[1],x[last_zero_plus]])
}
print(conf_int_2(set_1,0.1))
print(conf_int_2(set_1,0.1))
print(conf_int_2(set_1,0.1))
print(conf_int_2(set_1,0.1))
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = match(0,output)
last_zero_plus = zeros.tail(zeros,n=1) + 1
return (x[zeros[1],x[last_zero_plus]])
}
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = match(0,output)
last_zero_plus = zeros.tail(zeros,n=1) + 1
return (c(x[zeros[1]],x[last_zero_plus]))
}
print(conf_int_2(set_1,0.1))
print(conf_int_2(set_1,0.1))
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = match(0,output)
last_zero_plus = zeros.tail(zeros,n=1) + 1
return (c(x[1])
}
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = match(0,output)
last_zero_plus = zeros.tail(zeros,n=1) + 1
return (c(x[1]))
}
print(conf_int_2(set_1,0.1))
print(conf_int_2(set_1,0.1))
print(conf_int_2(set_1,0.1))
print(conf_int(set_1,0.1))
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = match(0,output)
last_zero_plus = tail(zeros,n=1) + 1
return (c(x[1]))
}
print(conf_int(set_1,0.1))
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = match(0,output)
last_zero_plus = tail(zeros,n=1) + 1
return (c(x[zeros[1]],x[last_zero_plus]))
}
print(conf_int(set_1,0.1))
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = match(0,output)
print(zeros)
last_zero_plus = tail(zeros,n=1) + 1
return (c(x[zeros[1]],x[last_zero_plus]))
}
print(conf_int(set_1,0.1))
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = which(output %in% 0)
print(zeros)
last_zero_plus = tail(zeros,n=1) + 1
return (c(x[zeros[1]],x[last_zero_plus]))
}
print(conf_int(set_1,0.1))
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = which(output %in% 0)
lower_index = zeros[1]
upper_index = tail(zeros,n=1) + 1
return (c(x[lower_index],x[upper_index]))
}
print(conf_int(set_1,0.1))
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = which(output %in% 0)
lower_index = zeros[1]
upper_index = tail(zeros,n=1) + 1
print('the median must be greater than')
return (c(x[lower_index],x[upper_index]))
}
var = conf_int(set_1,0.1)
print(sprintf('[%i,%i)',var[1],var[2])
var = conf_int(set_1,0.1)
print(sprintf('[%i,%i)',var[1],var[2]))
var = conf_int(set_1,0.1)
print(sprintf('[%f,%f)',var[1],var[2]))
var = conf_int(set_1,0.1)
print(sprintf('[%f,%f)',var[1],var[2]))
