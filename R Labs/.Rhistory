X2 = rnorm(1000,0,1)
w = X1^2 + X2^2
hist(w,prob=TRUE)
plot(X1+X2,X1-X2)
X1 = rnorm(1000,0,1)
X2 = rnorm(1000,0,1)
w = abs(X1-X2)
X1 = rnorm(100000,0,1)
X2 = rnorm(100000,0,1)
w = abs(X1-X2)
a = sum(w>sqrt(2))
prob = a/100000
a = 1-pgamma(900,alpha = 100,beta = 0.1)
a = 1-pgamma(900,100,0.1)
a = 1-pgamma(900,0.1,100)
pgamma(900,100,0.1)
a = 1-pgamma(900,100,0.1)
return (num)
num_wrong = 8
max_rounds = 10000
run = function(col){
num = sample(0:14,1)
return (num)
}
run
run()
run)()
run()
run()
run()
num_wrong = 8
max_rounds = 10000
run = function(col){
num = sample(0:14,1)
if num < 8:
return TRUE
else:
return FALSE
}
num_wrong = 8
max_rounds = 10000
run = function(col){
num = sample(0:14,1)
if (num < 8){
return TRUE }
else{
return FALSE
}
}
num_wrong = 8
max_rounds = 10000
run = function(col){
num = sample(0:14,1)
if (num < 8) {
return (TRUE)
} else {
return (FALSE)
}
}
run()
run()
run()
run()
run()
run()
num_wrong = 8
max_rounds = 10000
run = function(){
num = sample(0:14,1)
if (num < 8) {
return (TRUE)
} else {
return (FALSE)
}
}
end = FALSE
round_counter = 0
end_couter = 0
while (end == FALSE){
round_counter = round_counter + 1
if (round_counter > max_rounds){
end = TRUE
}
if (run() == TRUE){
end_counter = 0
}
else{
end_counter = end_counter + 1
}
if (end_counter == num_wrong){
end = TRUE
}
}
num_wrong = 8
max_rounds = 10000
run = function(){
num = sample(0:14,1)
if (num < 8) {
return (TRUE)
} else {
return (FALSE)
}
}
end = FALSE
round_counter = 0
end_counter = 0
while (end == FALSE){
round_counter = round_counter + 1
if (round_counter > max_rounds){
end = TRUE
}
if (run() == TRUE){
end_counter = 0
}
else{
end_counter = end_counter + 1
}
if (end_counter == num_wrong){
end = TRUE
}
}
2^8
run = function(){
num = sample(0:14,1)
if (num < 8) {
return (TRUE)
} else {
return (FALSE)
}
}
countdist = function(){
num_wrong = 8
max_rounds = 50000
end = FALSE
round_counter = 0
end_counter = 0
while (end == FALSE){
round_counter = round_counter + 1
if (round_counter > max_rounds){
end = TRUE
}
if (run() == TRUE){
end_counter = 0
}
else{
end_counter = end_counter + 1
}
if (end_counter == num_wrong){
end = TRUE
}
}
return (max_rounds)
}
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
2^8
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
run = function(){
num = sample(0:14,1)
if (num < 8) {
return (TRUE)
} else {
return (FALSE)
}
}
countdist = function(){
num_wrong = 4
max_rounds = 50000
end = FALSE
round_counter = 0
end_counter = 0
while (end == FALSE){
round_counter = round_counter + 1
if (round_counter > max_rounds){
end = TRUE
}
if (run() == TRUE){
end_counter = 0
}
else{
end_counter = end_counter + 1
}
if (end_counter == num_wrong){
end = TRUE
}
}
return (max_rounds)
}
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
run = function(){
num = sample(0:14,1)
if (num < 8) {
return (TRUE)
} else {
return (FALSE)
}
}
countdist = function(){
num_wrong = 4
max_rounds = 50000
end = FALSE
round_counter = 0
end_counter = 0
while (end == FALSE){
round_counter = round_counter + 1
if (round_counter > max_rounds){
end = TRUE
}
var = run()
print(var)
if (var == TRUE){
end_counter = 0
}
else{
end_counter = end_counter + 1
}
if (end_counter == num_wrong){
end = TRUE
}
}
return (max_rounds)
}
countdist()
run = function(){
num = sample(0:14,1)
if (num < 8) {
return (TRUE)
} else {
return (FALSE)
}
}
countdist = function(){
num_wrong = 4
max_rounds = 50000
end = FALSE
round_counter = 0
end_counter = 0
while (end == FALSE){
round_counter = round_counter + 1
if (round_counter > max_rounds){
end = TRUE
}
var = run()
print(var)
if (var == TRUE){
end_counter = 0
}
else{
end_counter = end_counter + 1
}
if (end_counter == num_wrong){
end = TRUE
}
}
return (round_counter)
}
countdist()
run = function(){
num = sample(0:14,1)
if (num < 8) {
return (TRUE)
} else {
return (FALSE)
}
}
countdist = function(){
num_wrong = 4
max_rounds = 50000
end = FALSE
round_counter = 0
end_counter = 0
while (end == FALSE){
round_counter = round_counter + 1
if (round_counter > max_rounds){
end = TRUE
}
var = run()
if (var == TRUE){
end_counter = 0
}
else{
end_counter = end_counter + 1
}
if (end_counter == num_wrong){
end = TRUE
}
}
return (round_counter)
}
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
countdist()
a = c(countdist() for (i in 1:10))
a = c()
a + c(1,2)
b = c(1,2,3)
b
b + c(1,2)
(b,c(1,2))
(b)
output = array(dim(1,10))
array(dim = (1,10))
array(dim = (1:10))
array(c(1,2,3))
numeric(10)
a = numeric(10)
a[1]
a[0]
run = function(){
num = sample(0:14,1)
if (num < 8) {
return (TRUE)
} else {
return (FALSE)
}
}
countdist = function(x,n){
output = numeric(n)
for (i in 1:n){
num_wrong = x
max_rounds = 50000
end = FALSE
round_counter = 0
end_counter = 0
while (end == FALSE){
round_counter = round_counter + 1
if (round_counter > max_rounds){
end = TRUE
}
var = run()
if (var == TRUE){
end_counter = 0
}
else{
end_counter = end_counter + 1
}
if (end_counter == num_wrong){
end = TRUE
}
}
output[i] = round_counter
}
return (output)
}
countdist(8,10000)
hist(countdist(7,1000))
hist(countdist(9,10000))
hist(countdist(9,1000))
hist(countdist(10,1000))
run = function(){
num = sample(0:14,1)
if (num < 8) {
return (TRUE)
} else {
return (FALSE)
}
}
countdist = function(x,n){
output = numeric(n)
for (i in 1:n){
num_wrong = x
max_rounds = 2^(n+2)
end = FALSE
round_counter = 0
end_counter = 0
while (end == FALSE){
round_counter = round_counter + 1
if (round_counter > max_rounds){
end = TRUE
}
var = run()
if (var == TRUE){
end_counter = 0
}
else{
end_counter = end_counter + 1
}
if (end_counter == num_wrong){
end = TRUE
}
}
output[i] = round_counter
}
return (output)
}
hist(countdist(10,1000))
load("sbp.RData")
setwd("~/GitHub/The-Music-of-Primes/R Labs")
setwd("~/GitHub/The-Music-of-Primes/R Labs")
load("sbp.RData")
summary(sbp)
nSim = 10000
n = 10
meanArray = array(0,dim=nSim)
for (i in 1:nSim){
print(i)
sbpn = sbp[sample(length(sbp),n)]
sbpnmean = mean(sbpn)
meanArray[i] = sbpnmean
}
mean(meanArray)
var(meanArray)
summary(sbp)
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nsim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nsim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
hist(momArray[,2], main = expression('Distribution MOM estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
