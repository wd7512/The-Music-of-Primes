if (pbinom(i,n,0.5, lower.tail = TRUE) <= alpha/2){
T1_values = c(T1_values,i)
}
if (pbinom(i,n 1,0.5,lower.tail = FALSE) <= alpha/2){
conf_int = function(x,alpha){
n = length(x)
T1_values = c()
T2_values = c()
for (i in 0:n){
if (pbinom(i,n,0.5, lower.tail = TRUE) <= alpha/2){
T1_values = c(T1_values,i)
}
if (pbinom(i,n,0.5,lower.tail = FALSE) <= alpha/2){
T2_values = c(T2_values,i)
}
}
T_interval = intersect(setdiff(0:n,T1_values),setdiff(0:n,T2_values))
x_sorted = sort(x)
C1 = x_sorted[T_interval[1]]
C2 = x_sorted[tail(T_interval,1)]
return (c(C1,C2))
}
conf_int = function(x,alpha){
n = length(x)
T1_values = c()
T2_values = c()
for (i in 0:n){
if (pbinom(i,n,0.5, lower.tail = TRUE) <= alpha/2){
T1_values = c(T1_values,i)
}
if (pbinom(i,n+1,0.5,lower.tail = FALSE) <= alpha/2){
T2_values = c(T2_values,i)
}
}
T_interval = intersect(setdiff(0:n,T1_values),setdiff(0:n,T2_values))
x_sorted = sort(x)
C1 = x_sorted[T_interval[1]]
C2 = x_sorted[tail(T_interval,1)]
return (c(C1,C2))
}
sign.test(x = 0:10,m = 0:10,alpha = 0.05)
conf_int = function(x,alpha){
n = length(x)
T1_values = c()
T2_values = c()
for (i in 0:n){
if (pbinom(i,n,0.5, lower.tail = TRUE) <= alpha/2){
T1_values = c(T1_values,i)
}
if (pbinom(i,n+1,0.5,lower.tail = FALSE) <= alpha/2){
T2_values = c(T2_values,i)
}
}
T_interval = intersect(setdiff(0:n,T1_values),setdiff(0:n,T2_values))
x_sorted = sort(x)
C1 = x_sorted[T_interval[1]]
C2 = x_sorted[tail(T_interval,1)]
return (c(C1,C2))
}
conf_int_2 = function(x,alpha){
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alterantive='two.sided')
}
return (output)
}
print(conf_int_2(set_1,0.1))
conf_int = function(x,alpha){
n = length(x)
T1_values = c()
T2_values = c()
for (i in 0:n){
if (pbinom(i,n,0.5, lower.tail = TRUE) <= alpha/2){
T1_values = c(T1_values,i)
}
if (pbinom(i,n+1,0.5,lower.tail = FALSE) <= alpha/2){
T2_values = c(T2_values,i)
}
}
T_interval = intersect(setdiff(0:n,T1_values),setdiff(0:n,T2_values))
x_sorted = sort(x)
C1 = x_sorted[T_interval[1]]
C2 = x_sorted[tail(T_interval,1)]
return (c(C1,C2))
}
conf_int_2 = function(x,alpha){
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
return (output)
}
print(conf_int_2(set_1,0.1))
print(conf_int_2(0:10,0.1))
conf_int = function(x,alpha){
n = length(x)
T1_values = c()
T2_values = c()
for (i in 0:n){
if (pbinom(i,n,0.5, lower.tail = TRUE) <= alpha/2){
T1_values = c(T1_values,i)
}
if (pbinom(i,n+1,0.5,lower.tail = FALSE) <= alpha/2){
T2_values = c(T2_values,i)
}
}
T_interval = intersect(setdiff(0:n,T1_values),setdiff(0:n,T2_values))
x_sorted = sort(x)
C1 = x_sorted[T_interval[1]]
C2 = x_sorted[tail(T_interval,1)]
return (c(C1,C2))
}
conf_int_2 = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
return (output)
}
print(conf_int_2(set_1,0.1))
conf_int = function(x,alpha){
n = length(x)
T1_values = c()
T2_values = c()
for (i in 0:n){
if (pbinom(i,n,0.5, lower.tail = TRUE) <= alpha/2){
T1_values = c(T1_values,i)
}
if (pbinom(i,n+1,0.5,lower.tail = FALSE) <= alpha/2){
T2_values = c(T2_values,i)
}
}
T_interval = intersect(setdiff(0:n,T1_values),setdiff(0:n,T2_values))
x_sorted = sort(x)
C1 = x_sorted[T_interval[1]]
C2 = x_sorted[tail(T_interval,1)]
return (c(C1,C2))
}
conf_int_2 = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
return (x[output==0])
}
print(conf_int_2(set_1,0.1))
sign.test(set_1,m=2.6,alpha = 0.1, alternative='two.sided')
sign.test(set_1,m=2.8,alpha = 0.1, alternative='two.sided')
sign.test(set_1,m=2.7999,alpha = 0.1, alternative='two.sided')
sign.test(set_1,m=-1,alpha = 0.1, alternative='two.sided')
sign.test(set_1,m=-0.11,alpha = 0.1, alternative='two.sided')
sign.test(set_1,m=-0.1,alpha = 0.1, alternative='two.sided')
sign.test(set_1,m=0.1,alpha = 0.1, alternative='two.sided')
sign.test(set_1,m=0.0999,alpha = 0.1, alternative='two.sided')
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = match(0,output)
last_zero_plus = zeros.tail(zeros,n=1) + 1
return (x[zeros[1],x[last_zero_plus]])
}
print(conf_int_2(set_1,0.1))
print(conf_int_2(set_1,0.1))
print(conf_int_2(set_1,0.1))
print(conf_int_2(set_1,0.1))
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = match(0,output)
last_zero_plus = zeros.tail(zeros,n=1) + 1
return (x[zeros[1],x[last_zero_plus]])
}
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = match(0,output)
last_zero_plus = zeros.tail(zeros,n=1) + 1
return (c(x[zeros[1]],x[last_zero_plus]))
}
print(conf_int_2(set_1,0.1))
print(conf_int_2(set_1,0.1))
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = match(0,output)
last_zero_plus = zeros.tail(zeros,n=1) + 1
return (c(x[1])
}
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = match(0,output)
last_zero_plus = zeros.tail(zeros,n=1) + 1
return (c(x[1]))
}
print(conf_int_2(set_1,0.1))
print(conf_int_2(set_1,0.1))
print(conf_int_2(set_1,0.1))
print(conf_int(set_1,0.1))
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = match(0,output)
last_zero_plus = tail(zeros,n=1) + 1
return (c(x[1]))
}
print(conf_int(set_1,0.1))
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = match(0,output)
last_zero_plus = tail(zeros,n=1) + 1
return (c(x[zeros[1]],x[last_zero_plus]))
}
print(conf_int(set_1,0.1))
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = match(0,output)
print(zeros)
last_zero_plus = tail(zeros,n=1) + 1
return (c(x[zeros[1]],x[last_zero_plus]))
}
print(conf_int(set_1,0.1))
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = which(output %in% 0)
print(zeros)
last_zero_plus = tail(zeros,n=1) + 1
return (c(x[zeros[1]],x[last_zero_plus]))
}
print(conf_int(set_1,0.1))
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = which(output %in% 0)
lower_index = zeros[1]
upper_index = tail(zeros,n=1) + 1
return (c(x[lower_index],x[upper_index]))
}
print(conf_int(set_1,0.1))
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = which(output %in% 0)
lower_index = zeros[1]
upper_index = tail(zeros,n=1) + 1
print('the median must be greater than')
return (c(x[lower_index],x[upper_index]))
}
var = conf_int(set_1,0.1)
print(sprintf('[%i,%i)',var[1],var[2])
var = conf_int(set_1,0.1)
print(sprintf('[%i,%i)',var[1],var[2]))
var = conf_int(set_1,0.1)
print(sprintf('[%f,%f)',var[1],var[2]))
var = conf_int(set_1,0.1)
print(sprintf('[%f,%f)',var[1],var[2]))
m_values = array(0,dim=c(16,2)) #array to store the data
for (i in 0:15){
var = 0
for (j in i:15){
var = var + choose(15,j)
}
m = var * (1/2)^15 #calculates probability
m_values[i+1,1] = m
m_values[i+1,2] = (m <= 0.05) #tests if it is less than alpha
}
colnames(m_values) = c('P-Value of m','Less than 0.05?')
rownames(m_values) = 0:15
print(m_values)
set_1 = c(-1.4,2.8,3,0.8,1.5,2.2,-2.5,2,1.8,3.5,2.5,0.1,-3.3,3.6,1.4)
set_2 = c(-14,2.8,3,0.8,1.5,2.2,-2.5,2,1.8,3.5,2.5,0.1,-3.3,3.6,14)
var1 = sum(set_1 > 0) #calculates the total number of values greater than zero
var2 = sum(set_2 > 0)
print(c(var1,var2))
mean1 = mean(set_1)
mean2 = mean(set_2)
var1 = 1.761 * sd(set_1) / sqrt(length(set_1)) #equation *
var2 = 1.761 * sd(set_2) / sqrt(length(set_2))
print(c(mean1 >= var1,mean2 >= var2))
load(url('http://people.bath.ac.uk/trs35/tests_code.R'))
set.seed(0)
nSim = 10000
n = 100
arr = array(0,dim=nSim)
for (i in 1:nSim){
var = rnorm(n,mean = 0,sd = 1)
arr[i] = sign.test(var)
}
print(sum(arr)/length(arr))
set.seed(0)
nSim = 1000
n = 25
mew_arr = seq(0,2,0.05) #generates array of mew values
arr = array(0,dim=c(2,length(mew_arr)))
for (i in 1:length(mew_arr)){
arr1 = array(0,dim=nSim)
arr2 = array(0,dim=nSim)
for (j in 1:nSim){
var = rnorm(n, mean = mew_arr[i], sd = 1)
arr1[j] = sign.test(x = var)
arr2[j] = myt.test(x = var)
arr[1,i] =1 - sum(arr1) / length(arr1)
arr[2,i] =1 - sum(arr2) / length(arr2)
}
}
plot(mew_arr,1-arr[1,],main = 'Graph of the Power of the Sign Test vs T-Test for N(μ,1)',xlab = 'Values of μ', ylab = 'Power',ylim = c(0,1),col='red')
points(mew_arr,1-arr[2,],col='blue')
abline(h=0.95)
legend('bottomright',legend=c('Sign-Test','T-Test'),col=c('red','blue'),pch=1)
set.seed(0)
nSim = 1000
n = 25
m_arr = seq(0,2,0.05)
arr = array(0,dim=c(2,length(m_arr)))
for (i in 1:length(m_arr)){
arr1 = array(0,dim=nSim)
arr2 = array(0,dim=nSim)
for (j in 1:nSim){
var = rcauchy(n, location = m_arr[i], scale = 1)
arr1[j] = sign.test(x = var)
arr2[j] = myt.test(x = var)
arr[1,i] =1 - sum(arr1) / length(arr1)
arr[2,i] =1 - sum(arr2) / length(arr2)
}
}
plot(m_arr,1-arr[1,],main = 'Graph of the Power of the Sign Test vs T-Test for Cauchy(m,1)',xlab = 'Values of m', ylab = 'Power',ylim = c(0,1),col='red')
points(m_arr,1-arr[2,],col='blue')
abline(h=0.95)
legend('bottomright',legend=c('Sign-Test','T-Test'),col=c('red','blue'),pch=1)
conf_int = function(x,alpha){
x = sort(x)
output = array(dim=length(x))
for (i in 1:length(x)){
value = x[i]
output[i] = sign.test(x,m=value,alpha = alpha, alternative='two.sided')
}
zeros = which(output %in% 0)
lower_index = zeros[1]
upper_index = tail(zeros,n=1) + 1
return (c(x[lower_index],x[upper_index]))
}
var = conf_int(set_1,0.1)
print(sprintf('[%f,%f)',var[1],var[2]))
sort(set_1)
var = seq(min(set_1),max(set_1),0.1)
plot(var,sign.test(var))
var = seq(min(set_1),max(set_1),0.1)
plot(var,apply(X=var,FUN=sign.test(var))
var = seq(min(set_1),max(set_1),0.1)
plot(var,apply(X=var,FUN=sign.test(var)))
var = seq(min(set_1),max(set_1),0.1)
test_out = apply(var,2,sign.test,x=set_1,m=var,alpha=0.1,alternativ='two.sided')
var = seq(min(set_1),max(set_1),0.1)
test_out = apply(var,1,sign.test,x=set_1,m=var,alpha=0.1,alternativ='two.sided')
var = seq(min(set_1),max(set_1),0.1)
test_out = apply(var,sign.test,x=set_1,m=var,alpha=0.1,alternative='two.sided')
var = seq(min(set_1),max(set_1),0.1)
test_out = apply(var,FUN=sign.test,x=set_1,m=var,alpha=0.1,alternative='two.sided')
var = seq(min(set_1),max(set_1),0.1)
test_out = lapply(var,FUN=sign.test,x=set_1,m=var,alpha=0.1,alternative='two.sided')
var = seq(min(set_1),max(set_1),0.1)
test_out = arr(dim=length(var))
var = seq(min(set_1),max(set_1),0.1)
test_out = array(dim=length(var))
for (i in 1:length(var)){
test_out[i] = sign.test(set_1,m=var[i],alpha = 0.1, alternative='two.sided')
}
plot(var,test_out)
var = seq(min(set_1),max(set_1),0.1)
test_out = array(dim=length(var))
for (i in 1:length(var)){
test_out[i] = sign.test(set_1,m=var[i],alpha = 0.1, alternative='two.sided')
}
plot(var,test_out)
abline(v=0.1)
abline(v=2.8)
var = seq(min(set_1),max(set_1),0.05)
test_out = array(dim=length(var))
for (i in 1:length(var)){
test_out[i] = sign.test(set_1,m=var[i],alpha = 0.1, alternative='two.sided')
}
plot(var,test_out)
abline(v=0.1)
abline(v=2.8)
median = seq(min(set_1),max(set_1),0.05)
output = array(dim=length(median))
for (i in 1:length(var)){
output[i] = sign.test(set_1,m=median[i],alpha = 0.1, alternative='two.sided')
}
plot(median,output,main='sign.test over a changing median in the range from data set 1')
abline(v=0.1)
abline(v=2.8)
median = seq(min(set_1),max(set_1),0.05)
output = array(dim=length(median))
for (i in 1:length(var)){
output[i] = sign.test(set_1,m=median[i],alpha = 0.1, alternative='two.sided')
}
plot(median,output,main='sign.test over a changing median in the range from data set 1')
abline(v=0.1)
abline(v=2.8)
median = seq(min(set_1),max(set_1),0.1)
output = array(dim=length(median))
for (i in 1:length(var)){
output[i] = sign.test(set_1,m=median[i],alpha = 0.1, alternative='two.sided')
}
median = seq(min(set_1),max(set_1),0.05)
output = array(dim=length(median))
for (i in 1:length(var)){
output[i] = sign.test(set_1,m=median[i],alpha = 0.1, alternative='two.sided')
}
plot(median,output,main='sign.test over a changing median in the range from data set 1')
abline(v=0.1)
abline(v=2.8)
median = seq(min(set_1),max(set_1),0.05)
output = array(dim=length(median))
for (i in 1:length(var)){
output[i] = sign.test(set_1,m=median[i],alpha = 0.1, alternative='two.sided')
}
plot(median,output,main='sign.test over a changing median in the range from data set 1')
abline(v=0.1)
abline(v=2.8)
median = seq(min(set_1),max(set_1),0.1)
output = array(dim=length(median))
for (i in 1:length(var)){
output[i] = sign.test(set_1,m=median[i],alpha = 0.1, alternative='two.sided')
}
med = seq(min(set_1),max(set_1),0.1)
output = array(dim=length(med))
for (i in 1:length(var)){
output[i] = sign.test(set_1,m=med[i],alpha = 0.1, alternative='two.sided')
}
load(url('http://people.bath.ac.uk/trs35/tests_code.R'))
med = seq(min(set_1),max(set_1),0.1)
output = array(dim=length(med))
for (i in 1:length(var)){
output[i] = sign.test(set_1,m=med[i],alpha = 0.1, alternative='two.sided')
}
med
med = seq(min(set_1),max(set_1),0.1)
output = array(dim=length(med))
for (i in 1:length(var)){
output[i] = sign.test(set_1,m=med[i],alpha = 0.1, alternative='two.sided')
}
sign.test(set_1,0,alpha = 0.1, alternative='two.sided')
sign.test(set_1,0.1,alpha = 0.1, alternative='two.sided')
med = seq(min(set_1),max(set_1),0.1)
output = array(dim=length(med))
for (i in 1:length(var)){
print(med[i])
output[i] = sign.test(set_1,m=med[i],alpha = 0.1, alternative='two.sided')
}
med = seq(min(set_1),max(set_1),0.1)
output = array(dim=length(med))
for (i in 1:length(med)){
output[i] = sign.test(set_1,m=med[i],alpha = 0.1, alternative='two.sided')
}
plot(med,output,main='sign.test over a changing median in the range from data set 1',xlab='Median Value')
abline(v=0.1)
abline(v=2.8)
