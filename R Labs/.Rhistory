hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nsim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nsim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
hist(momArray[,2], main = expression('Distribution MOM estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
hist(momArray[,2], main = expression('Distribution MOM estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
hist(momArray[,2], main = expression('Distribution MOM estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
hist(momArray[,2], main = expression('Distribution MOM estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
momArray
View(momArray)
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma^2))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
hist(momArray[,2], main = expression('Distribution MOM estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
View(momArray)
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma^2))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
hist(momArray[,2], main = expression('Distribution MOM estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma^2))
#calculate MLE estimates and save them into the array
mle_mu <- mean(log(y))
mle_sigmasq <- sum((log(y)-mle_mu)^2) / n
mleArray[i,] <- c(mle_mu, mle_sigmasq)
}
hist(mleArray[,1], main = expression('Distribution MLE estimator of'~mu),
xlab = expression(hat(mu)))
hist(mleArray[,2], main = expression('Distribution MLE estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
mleArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma^2))
#calculate MLE estimates and save them into the array
mle_mu <- mean(log(y))
mle_sigmasq <- sum((log(y)-mle_mu)^2) / n
mleArray[i,] <- c(mle_mu, mle_sigmasq)
}
hist(mleArray[,1], main = expression('Distribution MLE estimator of'~mu),
xlab = expression(hat(mu)))
hist(mleArray[,2], main = expression('Distribution MLE estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
hist(mleArray[,1], main = expression('Distribution MLE estimator of'~mu),
xlab = expression(hat(mu)))
hist(mleArray[,2], main = expression('Distribution MLE estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma^2))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
hist(momArray[,2], main = expression('Distribution MOM estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
mleArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma^2))
#calculate MLE estimates and save them into the array
mle_mu <- mean(log(y))
mle_sigmasq <- sum((log(y)-mle_mu)^2) / n
mleArray[i,] <- c(mle_mu, mle_sigmasq)
}
hist(mleArray[,1], main = expression('Distribution MLE estimator of'~mu),
xlab = expression(hat(mu)))
hist(mleArray[,2], main = expression('Distribution MLE estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma^2))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
hist(momArray[,2], main = expression('Distribution MOM estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
mleArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma^2))
#calculate MLE estimates and save them into the array
mle_mu <- mean(log(y))
mle_sigmasq <- sum((log(y)-mle_mu)^2) / n
mleArray[i,] <- c(mle_mu, mle_sigmasq)
}
hist(mleArray[,1], main = expression('Distribution MLE estimator of'~mu),
xlab = expression(hat(mu)))
hist(mleArray[,2], main = expression('Distribution MLE estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma^2))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
hist(momArray[,2], main = expression('Distribution MOM estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
mleArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma))
#calculate MLE estimates and save them into the array
mle_mu <- mean(log(y))
mle_sigmasq <- sum((log(y)-mle_mu)^2) / n
mleArray[i,] <- c(mle_mu, mle_sigmasq)
}
hist(mleArray[,1], main = expression('Distribution MLE estimator of'~mu),
xlab = expression(hat(mu)))
hist(mleArray[,2], main = expression('Distribution MLE estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma^2))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
hist(momArray[,2], main = expression('Distribution MOM estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
mleArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma))
#calculate MLE estimates and save them into the array
mle_mu <- mean(log(y))
mle_sigmasq <- sum((log(y)-mle_mu)^2) / n
mleArray[i,] <- c(mle_mu, mle_sigmasq)
}
hist(mleArray[,1], main = expression('Distribution MLE estimator of'~mu),
xlab = expression(hat(mu)))
hist(mleArray[,2], main = expression('Distribution MLE estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
nSim = 10000
set.seed(7224)
n = 100
mu = 0
sigma = 1
momArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma^2))
#calculate mom estimates and save them into the array
m1 <- mean(y)
m2 <- mean(y^2)
mom_mu <- 2*log(m1)-0.5*log(m2)
mom_sigmasq <- log(m2) - 2*log(m1)
momArray[i,] <- c(mom_mu, mom_sigmasq)
}
hist(momArray[,1], main = expression('Distribution MOM estimator of'~mu),
xlab = expression(hat(mu)))
hist(momArray[,2], main = expression('Distribution MOM estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
set.seed(7224)
mleArray = array(0, dim=c(nSim,2))
for (i in 1:nSim){
#simulate values from log-normal
y <- exp(rnorm(n=n, mean=mu, sd=sigma))
#calculate MLE estimates and save them into the array
mle_mu <- mean(log(y))
mle_sigmasq <- sum((log(y)-mle_mu)^2) / n
mleArray[i,] <- c(mle_mu, mle_sigmasq)
}
hist(mleArray[,1], main = expression('Distribution MLE estimator of'~mu),
xlab = expression(hat(mu)))
hist(mleArray[,2], main = expression('Distribution MLE estimator of'~sigma^2),
xlab = expression(widehat(sigma^2)))
set_1 = c(-1.4,2.8,3,0.8,1.5,2.2,-2.5,2,1.8,3.5,2.5,0.1,-3.3,3.6,1.4)
set_2 = c(-14,2.8,3,0.8,1.5,2.2,-2.5,2,1.8,3.5,2.5,0.1,-3.3,3.6,14)
var1 = sum(set_1 > 0)
var2 = sum(set_2 > 0)
print(var1)
print(var2)
var1 = sum(set_1 > 0)
var2 = sum(set_2 > 0)
print(var1,var2)
var1 = sum(set_1 > 0)
var2 = sum(set_2 > 0)
print(var1,var2)
test_stat = function(array){
X = mean(array)
S = var(array)
n = length(array)
t = X/(S/sqrt(n))
return (t)
}
T1 = test_stat(var1)
T2 = test_stat(var2)
print(T1)
print(T2)
test_stat = function(array){
X = mean(array)
print(X)
S = var(array)
n = length(array)
t = X/(S/sqrt(n))
return (t)
}
T1 = test_stat(var1)
T2 = test_stat(var2)
print(T1)
print(T2)
test_stat = function(array){
X = mean(array)
S = var(array)
print(S)
n = length(array)
t = X/(S/sqrt(n))
return (t)
}
T1 = test_stat(var1)
T2 = test_stat(var2)
print(T1)
print(T2)
test_stat = function(ar){
X = mean(ar)
S = var(ar)
n = length(ar)
t = X/(S/sqrt(n))
return (t)
}
T1 = test_stat(var1)
T2 = test_stat(var2)
print(T1)
print(T2)
var(var1)
test_stat = function(ar){
X = mean(ar)
S = var(ar)
n = length(ar)
t = X/(S/sqrt(n))
return (t)
}
T1 = test_stat(set_1)
T2 = test_stat(set_2)
print(T1)
print(T2)
set_1 = c(-100.4,2.8,3,0.8,1.5,2.2,-2.5,2,1.8,3.5,2.5,0.1,-3.3,3.6,1.4)
set_2 = c(-14,2.8,3,0.8,1.5,2.2,-2.5,2,1.8,3.5,2.5,0.1,-3.3,3.6,14)
test_stat = function(ar){
X = mean(ar)
S = var(ar)
n = length(ar)
t = X/(S/sqrt(n))
return (t)
}
T1 = test_stat(set_1)
T2 = test_stat(set_2)
print(T1)
print(T2)
set_1 = c(-1.4,2.8,3,0.8,1.5,2.2,-2.5,2,1.8,3.5,2.5,0.1,-3.3,3.6,1.4)
set_2 = c(-14,2.8,3,0.8,1.5,2.2,-2.5,2,1.8,3.5,2.5,0.1,-3.3,3.6,14)
test_stat = function(ar){
X = mean(ar)
print(X)
S = var(ar)
n = length(ar)
t = X/(S/sqrt(n))
return (t)
}
T1 = test_stat(set_1)
T2 = test_stat(set_2)
print(T1)
print(T2)
test_stat = function(ar){
X = mean(ar)
print(X)
S = var(ar)
print(S)
n = length(ar)
t = X/(S/sqrt(n))
return (t)
}
T1 = test_stat(set_1)
T2 = test_stat(set_2)
print(T1)
print(T2)
test_stat = function(ar){
X = mean(ar)
S = var(ar)
n = length(ar)
t = X/(S/sqrt(n))
return (t)
}
T1 = test_stat(set_1)
T2 = test_stat(set_2)
print(T1)
print(T2)
test_stat = function(ar){
X = mean(ar)
S = var(ar)
n = length(ar)
t = X/(S/sqrt(n))
return (t)
}
T1 = test_stat(set_1)
T2 = test_stat(set_2)
print(T1)
print(T2)
set_1 = c(-1.4,2.8,3,0.8,1.5,2.2,-2.5,2,1.8,3.5,2.5,0.1,-3.3,3.6,1.4)
set_2 = c(-14,2.8,3,0.8,1.5,2.2,-2.5,2,1.8,3.5,2.5,0.1,-3.3,3.6,14)
var1 = sum(set_1 > 0)
var2 = sum(set_2 > 0)
print(var1)
print(var2)
mean1 = mean(set_1)
mean2 = mean(set_2)
var1 = 1.761 * var(set_1) / sqrt(length(set_1))
var2 = 1.761 * var(set_2) / sqrt(length(set_2))
print(mean1 >= var1)
print(mean2 >= var2)
